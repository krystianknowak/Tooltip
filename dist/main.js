!function(t){var e={};function o(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,o),i.l=!0,i.exports}o.m=t,o.c=e,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)o.d(n,i,function(e){return t[e]}.bind(null,i));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="",o(o.s=0)}([function(t,e,o){"use strict";o.r(e);class n extends HTMLElement{constructor(){super(),this.shadow=this.attachShadow({mode:"open"}),this._tooledObj={},this._clicked=!1}static get observedAttributes(){return["tooltip-for","clicked"]}attributeChangedCallback(t,e,o){this.render()}async render(){this.clean(),this._clicked=null!==this.getAttribute("clicked"),this._tooledObj=document.getElementById(this.getAttribute("tooltip-for")),console.log(this._tooledObj.offsetTop)}clean(){this.shadow.childNodes.forEach(t=>t.remove())}connectedCallback(){this.createShadow()}createShadow(){const t=this._tooledObj.getBoundingClientRect(),e=`\n      <style>\n        .tooltip {\n          width:160px;\n          background-color: rgba(10, 10, 10, 0.493);\n          box-shadow: 1px 1px 3px rgba(90, 90, 90, 0.541);\n          position: fixed;\n          top: 0;\n          left: 0;\n          z-index: 500;\n          border-radius: 8px;\n          color: #FFF;\n          padding: 5px 0px;\n          text-align: center;\n          visibility:hidden;\n          opacity:0;\n          transition: opacity .6s;\n        }\n  \n        .tooltip::after {\n          content: "";\n          position: absolute;\n          top: 100%;\n          left: 50%;\n          margin-left: -5px;\n          border-width: 5px;\n          border-style: solid;\n          border-color: rgba(10, 10, 10, 0.493) transparent transparent transparent;\n        }\n      </style>\n  \n      <div class="tooltip">\n          ${this.innerHTML}\n      </div>\n      `;this.shadow.innerHTML=e;const o=this.shadow.querySelector(".tooltip");window.addEventListener("scroll",()=>{o.style.visibility="hidden",o.style.opacity="0"}),!0===this._clicked?(this._tooledObj.addEventListener("click",()=>{o.style.top=`${this._tooledObj.offsetTop-window.scrollY+100-2*t.height}px`,o.style.left=`${t.x-t.width/2}px`,o.style.visibility="visible",o.style.opacity="1"}),this._tooledObj.addEventListener("focusout",()=>{o.style.visibility="hidden",o.style.opacity="0"})):(this._tooledObj.addEventListener("mouseover",()=>{o.style.top=`${this._tooledObj.offsetTop-window.scrollY+100-2*t.height}px`,o.style.left=`${t.x-t.width/2}px`,o.style.visibility="visible",o.style.opacity="1"}),this._tooledObj.addEventListener("mouseout",()=>{o.style.visibility="hidden",o.style.opacity="0"}))}}(()=>customElements.define("tool-tip",n))()}]);